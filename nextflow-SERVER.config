manifest {
    /* nextflow.config for DRAM2 in Nextflow */

    /* Homepage of project */
    homePage = 'https://github.com/BioRRW/DRAM2-NF'
    
    /* Author */
    author = 'Reed Woyda'

    /* Description of project */
    description = 'The purpose of this repo is to have fun building DRAM2 in Nextflow.'

    /* Main pipeline script */
    mainScript = 'DRAM2.nf'
    
    /* version */
    // No version yet
}

params {
    /* Help menu and version */
        help = 0
        h = 0
        help_call = 0
        help_annotate = 0
        help_distill = 0
        help_adjectives = 0
        v = 0
        version = 0

    /* SLURM options */
        slurm_queue = 'wrighton-hi,wrighton-low'
        slurm_node = "tardigrade"

    /* Number of threads */
        threads = 1

    /* Rename input fasta headers option */
        rename = 0

    /* Data type of input fasta */
        data_type = "genomic"

    /* sequence_type option for fasta: nuc or prot or nucleotide or protein */
        sequence_type = "n"

    /* Input Fasta Directory */
        fastas = "./input_fasta/*.f*"
        fasta_fmt = "*.f*"
        input_fasta = 0

    /* Input Called genes Directory */
        genes = "./input_genes/*.faa"
        genes_fmt = "*.faa"
        input_genes = ""

    /* Default output directory */
        outdir = './DRAM2-NF_output'

    /* Call genes with prodigal */
        call = 0
        // prodigal mode either single or meta. 
        prodigal_mode = "single"
        // prodigal trans table options: [1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25]
        prodigal_trans_table = "11"
        // prodigal format options: gbk, gff, or sco
        //This is not for use, we will always output gff and gbk
        prodigal_format = "gff"
        min_contig_len = "2500"

    /* Annotate options */
        annotations = ""
        annotate = 0 // annotate or not to annotate
        add_annotations = ""
        merge_annotations = ""
        bit_score_threshold =  "60" // MMseqs threshold search to retain hits.
        rbh_bit_score_threshold =  "350"
        hmmsearch_threads = "2"

    /* Taxonomy and Bin Quality ingest */
        taxa = "/home/projects-wrighton-2/Pipeline_Development/DRAM2-Nextflow/test_data/HMP_DRAM1_test_data/gtdbtk.bac120.summary.tsv"
        bin_quality = "/home/projects-wrighton-2/Pipeline_Development/DRAM2-Nextflow/test_data/HMP_DRAM1_test_data/checkm2-HMP-76-quality.tsv"

    /* Annotation database options */
        use_kegg = 0
        use_kofam = 0
        use_dbcan = 0
        use_camper = 0
        use_fegenie = 0
        use_methyl = 0
        use_canthyd = 0
        use_heme = 0
        use_sulfur = 0
        use_methyl = 0
        use_pfam = 0
        use_merops = 0
        use_vog = 0
        use_dbset = 0
        use_uniref = 0
        use_viral = 0

    /* Database names */
        kegg_name = "kegg"
        dbcan_name = "dbcan"
        kofam_name = "kofam"
        merops_name = "merops"
        viral_name = "viral"
        camper_name = "camper"
        canthyd_name = "cant_hyd"
        fegenie_name = "fegenie"
        sulfur_name = "sulfur"
        methyl_name = "methyl"
        uniref_name = "uniref"
        pfam_name = "pfam"
        vogdb_name = "vogdb"

    /* E-value cutoffs for each database */
        kegg_e_value = "1e-5"
        kofam_e_value = "1e-5"
        dbcan_e_value = "1e-15"
        merops_e_value = "1e-1"
        vog_e_value = "1e-5"
        camper_e_value = "1e-5"
        uniref_e_value = "1e-5" //double check this
        canthyd_e_value = "1e-5"
        sulfur_e_value = "1e-5"
        fegenie_e_value = "1e-5"

    /* Database list for generating GFF and GBK */
        database_list = "empty"
        generate_gff = ""
        generate_gbk = ""


    /* Annotation database locations */
        // KEGG
            kegg_db = "./databases/kegg/"

        // Uniref
            uniref_db = "./databases/uniref/"

        // Pfam
            pfam_mmseq_db = "./databases/pfam/mmseqs/"
        
        // merops
            merops_db = "./databases/merops/"

        // viral
            viral_db = "./databases/viral/"

        // kofam
            kofam_db = "./databases/kofam/"
            kofam_list = "./databases/kofam/kofam_ko_list.tsv"
            kofam_top_hit = 'false'

        // dbcan
            dbcan_db = "./databases/dbcan/"
            dbcan_fam_activities = "./databases/dbcan/dbcan.fam-activities.tsv"
            dbcan_subfam_activities = "./databases/dbcan/dbcan.fam-activities.tsv"
            dbcan_top_hit = 'true'

        // vogdb
            vog_db = "./databases/vogdb/"
            vog_list = "./databases/vogdb/vog_annotations_latest.tsv.gz"
            vog_top_hit = 'false'

        // CAMPER
            camper_hmm_db = "./databases/camper/hmm/"
            camper_hmm_list = "./databases/camper/hmm/camper_hmm_scores.tsv"
            camper_mmseqs_db = "./databases/camper/mmseqs/"
            camper_mmseqs_list = "./databases/camper/mmseqs/camper_scores.tsv"
            camper_top_hit = 'false'

        // cant hyd
            canthyd_hmm_db = "./databases/canthyd/hmm/"
            cant_hyd_hmm_list = "./databases/canthyd/hmm/cant_hyd_HMM_scores.tsv"
            canthyd_mmseqs_db = "./databases/canthyd/mmseqs/"
            canthyd_mmseqs_list = "./databases/canthyd/mmseqs/cant_hyd_BLAST_scores.tsv"
            canthyd_top_hit = 'false'

        // fegenie
            fegenie_db = "./databases/fegenie/"
            fegenie_list = "./databases/fegenie/fegenie_iron_cut_offs.txt"

        // Sulfur
            sulfur_db = "./databases/sulfur/"

        // Methyl
            methyl_db = "./databases/methyl/"

        // SQL annotation descriptions database
            sql_descriptions_db = "./databases/db_descriptions/description_db.sqlite"

    /* rRNA and tRNA inputs */
        rrnas = ""
        trnas = ""


    /* Distill options */
        distill = 0
        merge_distill = ""
        distill_flag = 0
        distill_topic = ""
        distill_ecosystem = ""
        distill_custom = ""

    /* Distill sheets */
        /* Dummy sheet */
            distill_dummy_sheet = "./assets/forms/distill_sheets/dummy.tsv"
        
        /* Topic */
            distill_carbon_sheet = "./assets/forms/distill_sheets/distill_carbon_Jan252024.tsv"
            distill_energy_sheet = "./assets/forms/distill_sheets/distill_energy_Jan252024.tsv"
            distill_misc_sheet = "./assets/forms/distill_sheets/distill_misc_Jan252024.tsv"
            distill_nitrogen_sheet = "./assets/forms/distill_sheets/distill_nitrogen_Jan252024.tsv"
            distill_transport_sheet = "./assets/forms/distill_sheets/distill_transport_Jan252024.tsv"
            distill_camper_sheet = "./assets/forms/distill_sheets/distill_camper_Feb122024.tsv"
    
        /* Ecosystem */
            distill_eng_sys_sheet = "./assets/forms/distill_sheets/distill_eng_sys_Jan252024.tsv"
            distill_ag_sheet = "./assets/forms/distill_sheets/distill_ag_Jan252024.tsv"   

    /* Additional forms */
        module_step_form = "./assets/forms/module_step_form.20220928.tsv"
        function_heatmap_form = "./assets/forms/function_heatmap_form.20220928.tsv"
        etc_module_database = "./assets/forms/etc_module_database.20220928.tsv"
        amg_database = "./assets/forms/amg_database.20220928.tsv"

    /* Supporting scripts TEMPORARY - will be put into containers or within repo */
        /* Annotation foramtting scripts */
            parse_hmmsearch_script = "./assets/parse_hmmsearch.py"
            kegg_formatter_script = "./assets/kegg_hmm_formatter.py"
            kofam_hmm_formatter_script = "./assets/kofam_hmm_formatter.py"
            dbcan_hmm_formatter_script = "./assets/dbcan_hmm_formatter.py"
            canthyd_hmm_formatter_script = "./assets/canthyd_hmm_formatter.py"
            vog_hmm_formatter_script = "./assets/vog_hmm_formatter.py"
            camper_hmm_formatter_script = "./assets/camper_hmm_formatter.py"
            sulfur_hmm_formatter_script = "./assets/sulfur_hmm_formatter.py"
            fegenie_hmm_formatter_script = "./assets/fegenie_hmm_formatter.py"
        
        /* Annotation mmseqs and SQL related scripts */
            mmseqs_add_descriptions_script = "./assets/mmseqs_add_descriptions.py"
            sql_parser_script = "./assets/sql_add_descriptions.py"
            mmseqs_rbh_filter_script = "./assets/rbh_mmseqs_filter.py"

        /* GFF and GBK generation script */
            ch_generate_gff_gbk_script = "./assets/generate_gff_genbank.py"

        /* Call genes related scripts */
            generate_gene_locs_script = "./assets/generate_gene_loc_tsv.py"
            called_genes_loc_script_faa = "./assets/generate_faa_gene_loc_tsv.py"
            
        /* Combining annotations scripts */
            combine_annotations_script = "./assets/combine_annotations.py"
            count_annots_script = "./assets/count_annotations.py"
        
        /* Distill related scripts */
            distill_xlsx_script = "./assets/distill_xlsx.py"
            distill_sql_script = "./assets/distill_sql.py"

    /* Merge Options */
        merge = 0

    /* Containers */
        main_container = "./containers/DRAM2-Nextflow-Main-Container-March252024-V4.sif"

    /* Max forks Options */
        max_forks_single_cpu  = 2
        max_forks_user_cpu = 2
        max_forks_hmm = 2
}
/*
process {

    withName: RENAME_FASTA {
        publishDir = [
            path: "${params.outdir}/Processed_inputs",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "1"
        time = '23h'
        memory = '100 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-rename"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: CALL_GENES {
        publishDir = [
            path: "${params.outdir}/Prodigal_v2.6.3",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "1"
        time = '23h'
        memory = '12 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-call"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: QUAST {
        publishDir = [
            path: "${params.outdir}/QUAST_v5.2.0",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-quast"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: GENE_LOCS {
        publishDir = [
            path: "${params.outdir}/Processed_inputs",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "1"
        time = '23h'
        memory = '1 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-gene-locs"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: TRNA_SCAN {

        publishDir = [
            path: "${params.outdir}/tRNA_rRNA",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '8 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-tRNA-scan"

        maxForks = "${params.max_forks_user_cpu}"
    }

    withName: RRNA_SCAN {
        publishDir = [
            path: "${params.outdir}/tRNA_rRNA",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '8 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-rRNA-scan"

        maxForks = "${params.max_forks_user_cpu}"
    }

    withName: TRNA_COLLECT {
        publishDir = [
            path: "${params.outdir}/tRNA_rRNA",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = 1
        time = '23h'
        memory = '1 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-tRNA-collect"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: RRNA_COLLECT {
        publishDir = [
            path: "${params.outdir}/tRNA_rRNA",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = 1
        time = '23h'
        memory = '200 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-rRNA-collect"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: MMSEQS_INDEX {

        publishDir = [
            path: "${params.outdir}/MMSEQS2",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '20 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-mmseqs-index"

        maxForks = "${params.max_forks_single_cpu}"
    }   

    withName: MMSEQS_SEARCH {
        publishDir = [
            path: "${params.outdir}/MMSEQS2",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '200 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-mmseqs-search"

        maxForks = "${params.max_forks_user_cpu}"
    }  

    withName: ADD_SQL_DESCRIPTIONS {
        publishDir = [
            path: "${params.outdir}/MMSEQS2",
            mode: 'copy',
        ]

        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '100 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-add-sql-descriptions" : "--job-name=DRAM2-add-sql-descriptions"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: HMM_SEARCH {
        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '2'
        time = '23h'
        memory = '32 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-search" : "--job-name=DRAM2-hmm-search"

        maxForks = "${params.max_forks_hmm}"
    }

    withName: PARSE_HMM {
        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-parse-hmm" : "--job-name=DRAM2-parse-hmm"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: KEGG_HMM_FORMATTER {
        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-kegg-format" : "--job-name=DRAM2-hmm-kegg-format"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: KOFAM_HMM_FORMATTER {
        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-kofam-format" : "--job-name=DRAM2-hmm-kofam-format"

        maxForks = "${params.max_forks_single_cpu}"
    }

    withName: CANTHYD_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-kcanthyd-format" : "--job-name=DRAM2-hmm-canthyd-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: VOG_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-vog-format" : "--job-name=DRAM2-hmm-vog-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: CAMPER_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-camper-format" : "--job-name=DRAM2-hmm-camper-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: SULFUR_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = params.slurm_node ? "--nodelist=${params.slurm_node} --job-name=DRAM2-hmm-sulfur-format" : "--job-name=DRAM2-hmm-sulfur-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: FEGENIE_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-hmm-fegenie-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: GENERIC_HMM_FORMATTER {
    

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-hmm-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: DBCAN_HMM_FORMATTER {

        publishDir = [
            path: "${params.outdir}/HMM_search",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-hmm-dbcan-format"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: COMBINE_ANNOTATIONS {
        
        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-combine-annotations"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: COUNT_ANNOTATIONS {

        
        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-count-annotations"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: ADD_ANNOTATIONS {

        
        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-add-annotations"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: MERGE_ANNOTATIONS {

        
        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-merge-annotations"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: ADD_TAXA {

        
        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-taxa"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: ADD_BIN_QUALITY {

        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-bin-quality"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: GENERATE_GFF_GENBANK {

        publishDir = [
            path: "${params.outdir}/RAW",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-GFF-GBK"

        maxForks = '1'
    }
    withName: COMBINE_DISTILL {
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-distill-prep"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: DISTILL {

        publishDir = [
            path: "${params.outdir}/DISTILL",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = "${params.threads}"
        time = '23h'
        memory = '200 MB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-distill-final"

        maxForks = "${params.max_forks_single_cpu}"
    }
    withName: PRODUCT_HEATMAP {
    

        publishDir = [
            path: "${params.outdir}",
            mode: 'copy',
        ]
        
        executor="slurm"
        cpus = '1'
        time = '23h'
        memory = '2 GB'
        queue = "${params.slurm_queue}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "") + "--job-name=DRAM2-product-heatmaps"

        maxForks = "${params.max_forks_single_cpu}"
    }
}
*/


profiles {
    conda_slurm {
        includeConfig 'assets/conda/conda.config'
        conda.enabled = true
        process.conda = './assets/conda/environment.yml'
    }
    singularity_slurm {
        includeConfig 'assets/singularity/singularity.config'
        process.container = "${params.main_container}"
        singularity {
            enabled = true
            autoMounts = true
        }
    }

}

